{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grafonnet provides an easy and maintainable way of writing Grafana dashboards. Instead of generating JSON files and maintaining them, you can easily create your own dashboards using the many helpers grafonnet-lib offers you, thanks to the data templating language Jsonnet . Grafana dashboard A dashboard in Grafana is represented by a JSON object . While this choice makes sense from a technical point of view, people who want to keep those dashboards under version control end up putting large, independent JSON files under source control. When doing so, it is hard to maintain the same links, templates, or even annotation between graphs. It usually requires a lot of custom tooling to change and keep those Json files aligned. There are alternatives, like grafanalib , that makes thing easier. However, as Grafonnet is using Jsonnet , a superset of JSON, it gives you out of the box a very easy way to use any feature of grafana that would not be covered by Grafonnet already. Scope Grafonnet aims to support any basic feature of dashboards (annotations, templates, rows, panels...) as well as a number of datasources and plugins. That is, core Grafana features and plugins only. We do, however, encourage development and use of community Grafonnet extensions. See the Community Plugins page for more info on this. Code of Conduct Grafonnet is developed within the Grafana community. Therefore we are following the same Code of Conduct as Grafana . You need to agree and follow the code of conduct when you contribute to Grafonnet. License We use the same license as Grafana (ASL 2.0).","title":"Home"},{"location":"#_1","text":"Grafonnet provides an easy and maintainable way of writing Grafana dashboards. Instead of generating JSON files and maintaining them, you can easily create your own dashboards using the many helpers grafonnet-lib offers you, thanks to the data templating language Jsonnet .","title":""},{"location":"#grafana-dashboard","text":"A dashboard in Grafana is represented by a JSON object . While this choice makes sense from a technical point of view, people who want to keep those dashboards under version control end up putting large, independent JSON files under source control. When doing so, it is hard to maintain the same links, templates, or even annotation between graphs. It usually requires a lot of custom tooling to change and keep those Json files aligned. There are alternatives, like grafanalib , that makes thing easier. However, as Grafonnet is using Jsonnet , a superset of JSON, it gives you out of the box a very easy way to use any feature of grafana that would not be covered by Grafonnet already.","title":"Grafana dashboard"},{"location":"#scope","text":"Grafonnet aims to support any basic feature of dashboards (annotations, templates, rows, panels...) as well as a number of datasources and plugins. That is, core Grafana features and plugins only. We do, however, encourage development and use of community Grafonnet extensions. See the Community Plugins page for more info on this.","title":"Scope"},{"location":"#code-of-conduct","text":"Grafonnet is developed within the Grafana community. Therefore we are following the same Code of Conduct as Grafana . You need to agree and follow the code of conduct when you contribute to Grafonnet.","title":"Code of Conduct"},{"location":"#license","text":"We use the same license as Grafana (ASL 2.0).","title":"License"},{"location":"api-docs/","text":"API Docs Generated API documentation from JSDoc style comments. alertCondition.new Returns a new condition of alert of graph panel. Currently the only condition type that exists is a Query condition that allows to specify a query letter, time range and an aggregation function. @params evaluatorParams : Value of threshold evaluatorType : Type of threshold operatorType : Operator between conditions queryRefId : The letter defines what query to execute from the Metrics tab queryTimeEnd : End of time range queryTimeStart : Begging of time range reducerParams : Params of an aggregation function reducerType : Name of an aggregation function @return A json that represents a condition of alert alertlist.new annotation.datasource barGaugePanel.new Create a bar gauge panel , @params datasource : Panel datasource. description : Panel description. thresholds : An array of threashold values. title : Panel title. unit : The unit of the data. @methods addTarget(target) : Adds a target object. addTargets(targets) : Adds an array of targets. cloudwatch.target Return a CloudWatch Target @params alias : datasource : dimensions : highResolution : metric : namespace : period : region : statistic : @return Panel target dashboard.new dashlist.new Returns a new dashlist panel that can be added in a row. It requires the dashlist panel plugin in grafana, which is built-in. @params description : Description of the panel headings : Chosen list selection(starred, recently Viewed, search) is shown as a heading limit : Set maximum items in a list query : Query to search by recent : Displays recently viewed dashboards search : Description of the panel starred : Displays starred dashboards tags : Tag(s) to search by title : The title of the dashlist panel. @return A json that represents a dashlist panel elasticsearch.target gaugePanel.new Creates a gauge panel . @params allValues : Show all values instead of reducing to one. datasource : Panel datasource. decimals : Number of decimal places to show. description : Panel description. displayName : Change the field or series name. fields : Fields that should be included in the panel. max : Leave empty to calculate based on all values. min : Leave empty to calculate based on all values. noValue : What to show when there is no value. pluginVersion : Plugin version the panel should be modeled for. This has been tested with the default, '7', and '6.7'. reducerFunction : Function to use to reduce values to when using single value. repeat : Name of variable that should be used to repeat this panel. repeatDirection : 'h' for horizontal or 'v' for vertical. repeatMaxPerRow : Maximum panels per row in repeat mode. showThresholdLabels : Render the threshold values around the gauge bar. showThresholdMarkers : Render the thresholds as an outer bar. thresholdsMode : 'absolute' or 'percentage'. title : Panel title. transparent : Whether to display the panel without a background. unit : Panel unit field option. valueLimit : Limit of values in all values mode. @methods addDataLink(link) : Adds a data link. addDataLinks(links) : Adds an array of data links. addLink(link) : Adds a link. Argument format: { title: 'Link Title', url: 'https://...', targetBlank: true } . addLinks(links) : Adds an array of links. addMapping(mapping) : Adds a value mapping. addMappings(mappings) : Adds an array of value mappings. addTarget(target) : Adds a target object. addTargets(targets) : Adds an array of targets. addThreshold(step) : Adds a threshold step. Argument format: { color: 'green', value: 0 } . addThresholds(steps) : Adds an array of threshold steps. grafana graphPanel.new Returns a new graph panel that can be added in a row. It requires the graph panel plugin in grafana, which is built-in. @params aliasColors : Define color mappings for graphs bars : Display bars, boolean dashes : Display line as dashes datasource : Datasource decimals : Override automatic decimal precision for legend and tooltip. If null, not added to the json output. decimalsY1 : Override automatic decimal precision for the first Y axis. If null, use decimals parameter. decimalsY2 : Override automatic decimal precision for the second Y axis. If null, use decimals parameter. fill : Fill, integer from 0 to 10 format : Unit of the Y axes formatY1 : Unit of the first Y axis formatY2 : Unit of the second Y axis labelY1 : Label of the first Y axis labelY2 : Label of the second Y axis legend_alignAsTable : Show legend as table legend_avg : Show average in legend legend_current : Show current in legend legend_max : Show max in legend legend_min : Show min in legend legend_rightSide : Show legend to the right legend_show : Show legend legend_sideWidth : Legend width legend_sort : Sort order of legend legend_sortDesc : Sort legend descending legend_total : Show total in legend legend_values : Show values in legend lines : Display lines, boolean linewidth : Line Width, integer from 0 to 10 logBase1Y : Value of logarithm base of the first Y axis logBase2Y : Value of logarithm base of the second Y axis max : Max of the Y axes min : Min of the Y axes min_span : Min span percentage : Boolean (defaut: false) show as percentages pointradius : Radius of the points, allowed values are 0.5 or [1 ... 10] with step 1 points : Display points, boolean repeat : Variable used to repeat the graph panel shared_tooltip : Boolean Allow to group or spit tooltips on mouseover within a chart span : Width of the panel stack : Stack values staircase : Display line as staircase, boolean thresholds : Configuration of graph thresholds title : The title of the graph panel. transparent : Boolean (default: false) If set to true the panel will be transparent value_type : Type of tooltip value x_axis_buckets : restricts the x axis to this amount of buckets x_axis_max : restricts the x axis to display up to this value if supplied x_axis_min : restricts the x axis to display from this value if supplied x_axis_mode : X axis mode, one of [time, series, histogram] x_axis_values : Chosen value of series, one of [avg, min, max, total, count] @return A json that represents a graph panel graphite.target Return an Graphite Target @params datasource : Datasource. hide : Disable query on graph. target : Graphite Query. Nested queries are possible by adding the query reference (refId). targetFull : Expanding the @target. Used in nested queries. textEditor : Enable raw query mode. @return Panel target heatmapPanel.new Returns a heatmap panel. Requires the heatmap panel plugin in Grafana, which is built-in. @params cards_cardPadding : How much padding to put between bucket cards cards_cardRound : How much rounding should be applied to the bucket card shape color_cardColor : Hex value of color used when color_colorScheme is 'opacity' color_colorScale : How to scale the color range, 'linear' or 'sqrt' color_colorScheme : TODO: document color_exponent : TODO: document color_max : The value for the end of the color range color_min : The value for the beginning of the color range color_mode : How to display difference in frequency with color, default 'opacity' dataFormat : How to format the data, default is 'timeseries' datasource : Datasource hideZeroBuckets : Whether or not to hide empty buckets, default is false highlightCards : TODO: document legend_show : Show legend minSpan : Minimum span of the panel when repeated on a template variable min_span : Min span repeat : Variable used to repeat the heatmap panel repeatDirection : Which direction to repeat the panel, 'h' for horizontal and 'v' for vertically span : Width of the panel title : The title of the heatmap panel tooltipDecimals : The number of decimal places to display in the tooltip tooltip_show : Whether or not to display a tooltip when hovering over the heatmap tooltip_showHistogram : Whether or not to display a histogram in the tooltip xAxis_show : Whether or not to show the X axis, default true xBucketNumber : Number of buckets for the X axis xBucketSize : Size of X axis buckets. Number or interval(10s, 15h, etc.) Has priority over xBucketNumber yAxis_decimals : Override automatic decimal precision for the Y axis yAxis_format : Unit of the Y axis yAxis_logBase : Only if dataFormat is 'timeseries' yAxis_max : Only if dataFormat is 'timeseries', max of the Y axis yAxis_min : Only if dataFormat is 'timeseries', min of the Y axis yAxis_show : Wheter or not to show the Y axis yAxis_splitFactor : TODO: document yBucketBound : Which bound ('lower' or 'upper') of the bucket to use, default 'auto' yBucketNumber : Number of buckets for the Y axis yBucketSize : Size of Y axis buckets. Has priority over yBucketNumber influxdb.target Return an InfluxDB Target @params alias : 'Alias By' pattern datasource : Datasource fill : 'Group by' missing values fill mode (works only with 'Group by time()') group_tags : 'Group by' tags list group_time : 'Group by' time condition (if set to null, do not groups by time) hide : Disable query on graph measurement : Tagged query 'From' measurement policy : Tagged query 'From' policy query : Raw InfluxQL statement rawQuery : Enable/disable raw query mode resultFormat : Format results as 'Time series' or 'Table' @return Panel target link.dashboards logPanel.new Returns a new log panel that can be added in a row. It requires the log panel plugin in grafana, which is built-in. @params datasource : Datasource span : Width of the panel title : The title of the log panel. @return A json that represents a log panel loki.target pieChartPanel.new Returns a new pie chart panel that can be added in a row. It requires the pie chart panel plugin in grafana, which needs to be explicitly installed. @params aliasColors : Define color mappings datasource : Datasource description : Description of the panel legendType : Type of legend (one of 'Right side', 'Under graph' or 'On graph') maxPerRow : Number of panels to display when repeated. Used in combination with repeat. min_span : Min span pieType : Type of pie chart (one of pie or donut) repeat : Variable used to repeat the pie chart repeatDirection : Which direction to repeat the panel, 'h' for horizontal and 'v' for vertical showLegend : Show legend showLegendPercentage : Show percentage values in the legend span : Width of the panel title : The title of the pie chart panel. valueName : Type of tooltip value @return A json that represents a pie chart panel pluginlist.new Returns a new pluginlist panel that can be added in a row. It requires the pluginlist panel plugin in grafana, which is built-in. @params description : Description of the panel limit : Set maximum items in a list title : The title of the pluginlist panel. @return A json that represents a pluginlist panel prometheus.target Prometheus target to be added to panels. @params datasource : (optional) Name of the Prometheus datasource. Leave by default otherwise. expr : PromQL query to be exercised against Prometheus. Checkout Prometheus documentation . format : (default 'time_series' ) Switch between 'table' , 'time_series' or 'heatmap' . Table will only work in the Table panel. Heatmap is suitable for displaying metrics of the Histogram type on a Heatmap panel. Under the hood, it converts cumulative histograms to regular ones and sorts series by the bucket bound. hide : (optional) Set to true to hide the target from the panel. instant : (optional) Perform an \"instant\" query, to return only the latest value that Prometheus has scraped for the requested time series. Instant queries return results much faster than normal range queries. Use them to look up label sets. interval : (optional) intervalFactor : (default 2 ) legendFormat : (default '' ) Controls the name of the time series, using name or pattern. For example {{hostname}} is replaced with the label value for the label hostname . @return A Prometheus target to be added to panels. row.new singlestat.new sql.target statPanel.new Creates a stat panel . @params allValues : Show all values instead of reducing to one. colorMode : 'value' or 'background'. datasource : Panel datasource. decimals : Number of decimal places to show. description : Panel description. displayName : Change the field or series name. fields : Fields that should be included in the panel. graphMode : 'none' or 'area' to enable sparkline mode. justifyMode : 'auto' or 'center'. max : Leave empty to calculate based on all values. min : Leave empty to calculate based on all values. noValue : What to show when there is no value. orientation : Stacking direction in case of multiple series or fields. pluginVersion : Plugin version the panel should be modeled for. This has been tested with the default, '7', and '6.7'. reducerFunction : Function to use to reduce values to when using single value. repeat : Name of variable that should be used to repeat this panel. repeatDirection : 'h' for horizontal or 'v' for vertical. repeatMaxPerRow : Maximum panels per row in repeat mode. thresholdsMode : 'absolute' or 'percentage'. title : Panel title. transparent : Whether to display the panel without a background. unit : Panel unit field option. valueLimit : Limit of values in all values mode. @methods addDataLink(link) : Adds a data link. addDataLinks(links) : Adds an array of data links. addLink(link) : Adds a link. Aregument format: { title: 'Link Title', url: 'https://...', targetBlank: true } . addLinks(links) : Adds an array of links. addMapping(mapping) : Adds a value mapping. addMappings(mappings) : Adds an array of value mappings. addTarget(target) : Adds a target object. addTargets(targets) : Adds an array of targets. addThreshold(step) : Adds a threshold step. Aregument format: { color: 'green', value: 0 } . addThresholds(steps) : Adds an array of threshold steps. table.new Returns a new table panel that can be added in a row. It requires the table panel plugin in grafana, which is built-in. @params columns : Columns for the panel datasource : Datasource description : Description of the panel height : Height of the panel links : Set of links for the panel. min_span : Min span sort : Sorting instruction for the panel span : Width of the panel styles : Styles for the panel title : The title of the graph panel. transform : allow table manipulation to present data as desired transparent : Boolean (default: false) If set to true the panel will be transparent @return A json that represents a table panel template.new Returns a new template that can be added to a dashboard. See what's a template . @params allValues : (optional) Formatting for multi-value variables current : (default null ) Can be null , 'all' for all, or any other custom text value. datasource : Template datasource hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. includeAll : (default false ) Whether all value option is available or not. label : (optional) Display name of the variable dropdown. If null, then the dropdown label will be the variable name. multi : (default false ) Whether multiple values can be selected or not from variable value list. name : Name of variable query : Query expression for the datasource. refresh : (default 'never' ) 'never' : variables queries are cached and values are not updated. This is fine if the values never change, but problematic if they are dynamic and change a lot. 'load' : Queries the data source every time the dashboard loads. This slows down dashboard loading, because the variable query needs to be completed before dashboard can be initialized. 'time' : Queries the data source when the dashboard time range changes. Only use this option if your variable options query contains a time range filter or is dependent on the dashboard time range. regex : (default '' ) Regex expression to filter or capture specific parts of the names returned by your data source query. To see examples, refer to Filter variables with regex . sort : (default 0 ) 0 : Without Sort, 1 : Alphabetical (asc), 2 : Alphabetical (desc), 3 : Numerical (asc), 4 : Numerical (desc). tagValuesQuery : (default '' ) Group values into selectable tags @return A template template.interval Use an interval variable to represent time spans such as '1m', '1h', '1d'. You can think of them as a dashboard-wide \"group by time\" command. Interval variables change how the data is grouped in the visualization. You can also use the Auto Option to return a set number of data points per time span. You can use an interval variable as a parameter to group by time (for InfluxDB), date histogram interval (for Elasticsearch), or as a summarize function parameter (for Graphite). @params auto_count : (default 300 ) Valid only if 'auto' is defined in query. Number of times the current time range will be divided to calculate the value, similar to the Max data points query option. For example, if the current visible time range is 30 minutes, then the auto interval groups the data into 30 one-minute increments. The default value is 30 steps. auto_min : (default '10s' ) Valid only if 'auto' is defined in query. The minimum threshold below which the step count intervals will not divide the time. To continue the 30 minute example, if the minimum interval is set to '2m' , then Grafana would group the data into 15 two-minute increments. current : Currently selected interval. Must be one of the values in the query. 'auto' is allowed if defined in the query. hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. label : (optional) Display name of the variable dropdown. If null, then the dropdown label will be the variable name. name : Variable name query : Comma separated values without spacing of intervals available for selection. Add 'auto' in the query to turn on the Auto Option. Ex: 'auto,5m,10m,20m' . @return A new interval variable for templating. template.datasource Data source variables allow you to quickly change the data source for an entire dashboard. They are useful if you have multiple instances of a data source, perhaps in different environments. @params current : Ex: 'Prometheus' . hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. label : (optional) Display name of the variable dropdown. If null, then the dropdown label will be the variable name. name : Data source variable name. Ex: 'PROMETHEUS_DS' . query : Type of data source. Ex: 'prometheus' . refresh : (default 'load' ) 'never' : Variables queries are cached and values are not updated. This is fine if the values never change, but problematic if they are dynamic and change a lot. 'load' : Queries the data source every time the dashboard loads. This slows down dashboard loading, because the variable query needs to be completed before dashboard can be initialized. 'time' : Queries the data source when the dashboard time range changes. Only use this option if your variable options query contains a time range filter or is dependent on the dashboard time range. regex : (default '' ) Regex filter for which data source instances to choose from in the variable value drop-down list. Leave this field empty to display all instances. @return A data source variable . template.custom Use a custom variable for values that do not change. This might be numbers, strings, or even other variables. @params allValues : (optional) Formatting for multi-value variables current : Selected value hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. includeAll : (default false ) Whether all value option is available or not. label : (default '' ) Display name of the variable dropdown. If you don\u2019t enter a display name, then the dropdown label will be the variable name. multi : (default false ) Whether multiple values can be selected or not from variable value list. name : Variable name query : Comma separated without spacing list of selectable values. refresh : (default 'never' ) 'never' : Variables queries are cached and values are not updated. This is fine if the values never change, but problematic if they are dynamic and change a lot. 'load' : Queries the data source every time the dashboard loads. This slows down dashboard loading, because the variable query needs to be completed before dashboard can be initialized. 'time' : Queries the data source when the dashboard time range changes. Only use this option if your variable options query contains a time range filter or is dependent on the dashboard time range. valuelabels : (default {} ) Display names for values defined in query. For example, if query='new,old' , then you may display them as follows valuelabels={new: 'nouveau', old: 'ancien'} . @return A custom variable. template.text Text box variables display a free text input field with an optional default value. This is the most flexible variable, because you can enter any value. Use this type of variable if you have metrics with high cardinality or if you want to update multiple panels in a dashboard at the same time. @params label : (default '' ) Display name of the variable dropdown. If you don\u2019t enter a display name, then the dropdown label will be the variable name. name : Variable name. @return A text box variable. template.adhoc Ad hoc filters allow you to add key/value filters that are automatically added to all metric queries that use the specified data source. Unlike other variables, you do not use ad hoc filters in queries. Instead, you use ad hoc filters to write filters for existing queries. Note: Ad hoc filter variables only work with InfluxDB, Prometheus, and Elasticsearch data sources. @params datasource : Target data source hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. label : (optional) Display name of the variable dropdown. If you don\u2019t enter a display name, then the dropdown label will be the variable name. name : Variable name. @return An ad hoc filter text.new timepicker.new","title":"API Docs"},{"location":"api-docs/#api-docs","text":"Generated API documentation from JSDoc style comments.","title":"API Docs"},{"location":"api-docs/#alertconditionnew","text":"Returns a new condition of alert of graph panel. Currently the only condition type that exists is a Query condition that allows to specify a query letter, time range and an aggregation function. @params evaluatorParams : Value of threshold evaluatorType : Type of threshold operatorType : Operator between conditions queryRefId : The letter defines what query to execute from the Metrics tab queryTimeEnd : End of time range queryTimeStart : Begging of time range reducerParams : Params of an aggregation function reducerType : Name of an aggregation function @return A json that represents a condition of alert","title":"alertCondition.new"},{"location":"api-docs/#alertlistnew","text":"","title":"alertlist.new"},{"location":"api-docs/#annotationdatasource","text":"","title":"annotation.datasource"},{"location":"api-docs/#bargaugepanelnew","text":"Create a bar gauge panel , @params datasource : Panel datasource. description : Panel description. thresholds : An array of threashold values. title : Panel title. unit : The unit of the data. @methods addTarget(target) : Adds a target object. addTargets(targets) : Adds an array of targets.","title":"barGaugePanel.new"},{"location":"api-docs/#cloudwatchtarget","text":"Return a CloudWatch Target @params alias : datasource : dimensions : highResolution : metric : namespace : period : region : statistic : @return Panel target","title":"cloudwatch.target"},{"location":"api-docs/#dashboardnew","text":"","title":"dashboard.new"},{"location":"api-docs/#dashlistnew","text":"Returns a new dashlist panel that can be added in a row. It requires the dashlist panel plugin in grafana, which is built-in. @params description : Description of the panel headings : Chosen list selection(starred, recently Viewed, search) is shown as a heading limit : Set maximum items in a list query : Query to search by recent : Displays recently viewed dashboards search : Description of the panel starred : Displays starred dashboards tags : Tag(s) to search by title : The title of the dashlist panel. @return A json that represents a dashlist panel","title":"dashlist.new"},{"location":"api-docs/#elasticsearchtarget","text":"","title":"elasticsearch.target"},{"location":"api-docs/#gaugepanelnew","text":"Creates a gauge panel . @params allValues : Show all values instead of reducing to one. datasource : Panel datasource. decimals : Number of decimal places to show. description : Panel description. displayName : Change the field or series name. fields : Fields that should be included in the panel. max : Leave empty to calculate based on all values. min : Leave empty to calculate based on all values. noValue : What to show when there is no value. pluginVersion : Plugin version the panel should be modeled for. This has been tested with the default, '7', and '6.7'. reducerFunction : Function to use to reduce values to when using single value. repeat : Name of variable that should be used to repeat this panel. repeatDirection : 'h' for horizontal or 'v' for vertical. repeatMaxPerRow : Maximum panels per row in repeat mode. showThresholdLabels : Render the threshold values around the gauge bar. showThresholdMarkers : Render the thresholds as an outer bar. thresholdsMode : 'absolute' or 'percentage'. title : Panel title. transparent : Whether to display the panel without a background. unit : Panel unit field option. valueLimit : Limit of values in all values mode. @methods addDataLink(link) : Adds a data link. addDataLinks(links) : Adds an array of data links. addLink(link) : Adds a link. Argument format: { title: 'Link Title', url: 'https://...', targetBlank: true } . addLinks(links) : Adds an array of links. addMapping(mapping) : Adds a value mapping. addMappings(mappings) : Adds an array of value mappings. addTarget(target) : Adds a target object. addTargets(targets) : Adds an array of targets. addThreshold(step) : Adds a threshold step. Argument format: { color: 'green', value: 0 } . addThresholds(steps) : Adds an array of threshold steps.","title":"gaugePanel.new"},{"location":"api-docs/#grafana","text":"","title":"grafana"},{"location":"api-docs/#graphpanelnew","text":"Returns a new graph panel that can be added in a row. It requires the graph panel plugin in grafana, which is built-in. @params aliasColors : Define color mappings for graphs bars : Display bars, boolean dashes : Display line as dashes datasource : Datasource decimals : Override automatic decimal precision for legend and tooltip. If null, not added to the json output. decimalsY1 : Override automatic decimal precision for the first Y axis. If null, use decimals parameter. decimalsY2 : Override automatic decimal precision for the second Y axis. If null, use decimals parameter. fill : Fill, integer from 0 to 10 format : Unit of the Y axes formatY1 : Unit of the first Y axis formatY2 : Unit of the second Y axis labelY1 : Label of the first Y axis labelY2 : Label of the second Y axis legend_alignAsTable : Show legend as table legend_avg : Show average in legend legend_current : Show current in legend legend_max : Show max in legend legend_min : Show min in legend legend_rightSide : Show legend to the right legend_show : Show legend legend_sideWidth : Legend width legend_sort : Sort order of legend legend_sortDesc : Sort legend descending legend_total : Show total in legend legend_values : Show values in legend lines : Display lines, boolean linewidth : Line Width, integer from 0 to 10 logBase1Y : Value of logarithm base of the first Y axis logBase2Y : Value of logarithm base of the second Y axis max : Max of the Y axes min : Min of the Y axes min_span : Min span percentage : Boolean (defaut: false) show as percentages pointradius : Radius of the points, allowed values are 0.5 or [1 ... 10] with step 1 points : Display points, boolean repeat : Variable used to repeat the graph panel shared_tooltip : Boolean Allow to group or spit tooltips on mouseover within a chart span : Width of the panel stack : Stack values staircase : Display line as staircase, boolean thresholds : Configuration of graph thresholds title : The title of the graph panel. transparent : Boolean (default: false) If set to true the panel will be transparent value_type : Type of tooltip value x_axis_buckets : restricts the x axis to this amount of buckets x_axis_max : restricts the x axis to display up to this value if supplied x_axis_min : restricts the x axis to display from this value if supplied x_axis_mode : X axis mode, one of [time, series, histogram] x_axis_values : Chosen value of series, one of [avg, min, max, total, count] @return A json that represents a graph panel","title":"graphPanel.new"},{"location":"api-docs/#graphitetarget","text":"Return an Graphite Target @params datasource : Datasource. hide : Disable query on graph. target : Graphite Query. Nested queries are possible by adding the query reference (refId). targetFull : Expanding the @target. Used in nested queries. textEditor : Enable raw query mode. @return Panel target","title":"graphite.target"},{"location":"api-docs/#heatmappanelnew","text":"Returns a heatmap panel. Requires the heatmap panel plugin in Grafana, which is built-in. @params cards_cardPadding : How much padding to put between bucket cards cards_cardRound : How much rounding should be applied to the bucket card shape color_cardColor : Hex value of color used when color_colorScheme is 'opacity' color_colorScale : How to scale the color range, 'linear' or 'sqrt' color_colorScheme : TODO: document color_exponent : TODO: document color_max : The value for the end of the color range color_min : The value for the beginning of the color range color_mode : How to display difference in frequency with color, default 'opacity' dataFormat : How to format the data, default is 'timeseries' datasource : Datasource hideZeroBuckets : Whether or not to hide empty buckets, default is false highlightCards : TODO: document legend_show : Show legend minSpan : Minimum span of the panel when repeated on a template variable min_span : Min span repeat : Variable used to repeat the heatmap panel repeatDirection : Which direction to repeat the panel, 'h' for horizontal and 'v' for vertically span : Width of the panel title : The title of the heatmap panel tooltipDecimals : The number of decimal places to display in the tooltip tooltip_show : Whether or not to display a tooltip when hovering over the heatmap tooltip_showHistogram : Whether or not to display a histogram in the tooltip xAxis_show : Whether or not to show the X axis, default true xBucketNumber : Number of buckets for the X axis xBucketSize : Size of X axis buckets. Number or interval(10s, 15h, etc.) Has priority over xBucketNumber yAxis_decimals : Override automatic decimal precision for the Y axis yAxis_format : Unit of the Y axis yAxis_logBase : Only if dataFormat is 'timeseries' yAxis_max : Only if dataFormat is 'timeseries', max of the Y axis yAxis_min : Only if dataFormat is 'timeseries', min of the Y axis yAxis_show : Wheter or not to show the Y axis yAxis_splitFactor : TODO: document yBucketBound : Which bound ('lower' or 'upper') of the bucket to use, default 'auto' yBucketNumber : Number of buckets for the Y axis yBucketSize : Size of Y axis buckets. Has priority over yBucketNumber","title":"heatmapPanel.new"},{"location":"api-docs/#influxdbtarget","text":"Return an InfluxDB Target @params alias : 'Alias By' pattern datasource : Datasource fill : 'Group by' missing values fill mode (works only with 'Group by time()') group_tags : 'Group by' tags list group_time : 'Group by' time condition (if set to null, do not groups by time) hide : Disable query on graph measurement : Tagged query 'From' measurement policy : Tagged query 'From' policy query : Raw InfluxQL statement rawQuery : Enable/disable raw query mode resultFormat : Format results as 'Time series' or 'Table' @return Panel target","title":"influxdb.target"},{"location":"api-docs/#linkdashboards","text":"","title":"link.dashboards"},{"location":"api-docs/#logpanelnew","text":"Returns a new log panel that can be added in a row. It requires the log panel plugin in grafana, which is built-in. @params datasource : Datasource span : Width of the panel title : The title of the log panel. @return A json that represents a log panel","title":"logPanel.new"},{"location":"api-docs/#lokitarget","text":"","title":"loki.target"},{"location":"api-docs/#piechartpanelnew","text":"Returns a new pie chart panel that can be added in a row. It requires the pie chart panel plugin in grafana, which needs to be explicitly installed. @params aliasColors : Define color mappings datasource : Datasource description : Description of the panel legendType : Type of legend (one of 'Right side', 'Under graph' or 'On graph') maxPerRow : Number of panels to display when repeated. Used in combination with repeat. min_span : Min span pieType : Type of pie chart (one of pie or donut) repeat : Variable used to repeat the pie chart repeatDirection : Which direction to repeat the panel, 'h' for horizontal and 'v' for vertical showLegend : Show legend showLegendPercentage : Show percentage values in the legend span : Width of the panel title : The title of the pie chart panel. valueName : Type of tooltip value @return A json that represents a pie chart panel","title":"pieChartPanel.new"},{"location":"api-docs/#pluginlistnew","text":"Returns a new pluginlist panel that can be added in a row. It requires the pluginlist panel plugin in grafana, which is built-in. @params description : Description of the panel limit : Set maximum items in a list title : The title of the pluginlist panel. @return A json that represents a pluginlist panel","title":"pluginlist.new"},{"location":"api-docs/#prometheustarget","text":"Prometheus target to be added to panels. @params datasource : (optional) Name of the Prometheus datasource. Leave by default otherwise. expr : PromQL query to be exercised against Prometheus. Checkout Prometheus documentation . format : (default 'time_series' ) Switch between 'table' , 'time_series' or 'heatmap' . Table will only work in the Table panel. Heatmap is suitable for displaying metrics of the Histogram type on a Heatmap panel. Under the hood, it converts cumulative histograms to regular ones and sorts series by the bucket bound. hide : (optional) Set to true to hide the target from the panel. instant : (optional) Perform an \"instant\" query, to return only the latest value that Prometheus has scraped for the requested time series. Instant queries return results much faster than normal range queries. Use them to look up label sets. interval : (optional) intervalFactor : (default 2 ) legendFormat : (default '' ) Controls the name of the time series, using name or pattern. For example {{hostname}} is replaced with the label value for the label hostname . @return A Prometheus target to be added to panels.","title":"prometheus.target"},{"location":"api-docs/#rownew","text":"","title":"row.new"},{"location":"api-docs/#singlestatnew","text":"","title":"singlestat.new"},{"location":"api-docs/#sqltarget","text":"","title":"sql.target"},{"location":"api-docs/#statpanelnew","text":"Creates a stat panel . @params allValues : Show all values instead of reducing to one. colorMode : 'value' or 'background'. datasource : Panel datasource. decimals : Number of decimal places to show. description : Panel description. displayName : Change the field or series name. fields : Fields that should be included in the panel. graphMode : 'none' or 'area' to enable sparkline mode. justifyMode : 'auto' or 'center'. max : Leave empty to calculate based on all values. min : Leave empty to calculate based on all values. noValue : What to show when there is no value. orientation : Stacking direction in case of multiple series or fields. pluginVersion : Plugin version the panel should be modeled for. This has been tested with the default, '7', and '6.7'. reducerFunction : Function to use to reduce values to when using single value. repeat : Name of variable that should be used to repeat this panel. repeatDirection : 'h' for horizontal or 'v' for vertical. repeatMaxPerRow : Maximum panels per row in repeat mode. thresholdsMode : 'absolute' or 'percentage'. title : Panel title. transparent : Whether to display the panel without a background. unit : Panel unit field option. valueLimit : Limit of values in all values mode. @methods addDataLink(link) : Adds a data link. addDataLinks(links) : Adds an array of data links. addLink(link) : Adds a link. Aregument format: { title: 'Link Title', url: 'https://...', targetBlank: true } . addLinks(links) : Adds an array of links. addMapping(mapping) : Adds a value mapping. addMappings(mappings) : Adds an array of value mappings. addTarget(target) : Adds a target object. addTargets(targets) : Adds an array of targets. addThreshold(step) : Adds a threshold step. Aregument format: { color: 'green', value: 0 } . addThresholds(steps) : Adds an array of threshold steps.","title":"statPanel.new"},{"location":"api-docs/#tablenew","text":"Returns a new table panel that can be added in a row. It requires the table panel plugin in grafana, which is built-in. @params columns : Columns for the panel datasource : Datasource description : Description of the panel height : Height of the panel links : Set of links for the panel. min_span : Min span sort : Sorting instruction for the panel span : Width of the panel styles : Styles for the panel title : The title of the graph panel. transform : allow table manipulation to present data as desired transparent : Boolean (default: false) If set to true the panel will be transparent @return A json that represents a table panel","title":"table.new"},{"location":"api-docs/#templatenew","text":"Returns a new template that can be added to a dashboard. See what's a template . @params allValues : (optional) Formatting for multi-value variables current : (default null ) Can be null , 'all' for all, or any other custom text value. datasource : Template datasource hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. includeAll : (default false ) Whether all value option is available or not. label : (optional) Display name of the variable dropdown. If null, then the dropdown label will be the variable name. multi : (default false ) Whether multiple values can be selected or not from variable value list. name : Name of variable query : Query expression for the datasource. refresh : (default 'never' ) 'never' : variables queries are cached and values are not updated. This is fine if the values never change, but problematic if they are dynamic and change a lot. 'load' : Queries the data source every time the dashboard loads. This slows down dashboard loading, because the variable query needs to be completed before dashboard can be initialized. 'time' : Queries the data source when the dashboard time range changes. Only use this option if your variable options query contains a time range filter or is dependent on the dashboard time range. regex : (default '' ) Regex expression to filter or capture specific parts of the names returned by your data source query. To see examples, refer to Filter variables with regex . sort : (default 0 ) 0 : Without Sort, 1 : Alphabetical (asc), 2 : Alphabetical (desc), 3 : Numerical (asc), 4 : Numerical (desc). tagValuesQuery : (default '' ) Group values into selectable tags @return A template","title":"template.new"},{"location":"api-docs/#templateinterval","text":"Use an interval variable to represent time spans such as '1m', '1h', '1d'. You can think of them as a dashboard-wide \"group by time\" command. Interval variables change how the data is grouped in the visualization. You can also use the Auto Option to return a set number of data points per time span. You can use an interval variable as a parameter to group by time (for InfluxDB), date histogram interval (for Elasticsearch), or as a summarize function parameter (for Graphite). @params auto_count : (default 300 ) Valid only if 'auto' is defined in query. Number of times the current time range will be divided to calculate the value, similar to the Max data points query option. For example, if the current visible time range is 30 minutes, then the auto interval groups the data into 30 one-minute increments. The default value is 30 steps. auto_min : (default '10s' ) Valid only if 'auto' is defined in query. The minimum threshold below which the step count intervals will not divide the time. To continue the 30 minute example, if the minimum interval is set to '2m' , then Grafana would group the data into 15 two-minute increments. current : Currently selected interval. Must be one of the values in the query. 'auto' is allowed if defined in the query. hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. label : (optional) Display name of the variable dropdown. If null, then the dropdown label will be the variable name. name : Variable name query : Comma separated values without spacing of intervals available for selection. Add 'auto' in the query to turn on the Auto Option. Ex: 'auto,5m,10m,20m' . @return A new interval variable for templating.","title":"template.interval"},{"location":"api-docs/#templatedatasource","text":"Data source variables allow you to quickly change the data source for an entire dashboard. They are useful if you have multiple instances of a data source, perhaps in different environments. @params current : Ex: 'Prometheus' . hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. label : (optional) Display name of the variable dropdown. If null, then the dropdown label will be the variable name. name : Data source variable name. Ex: 'PROMETHEUS_DS' . query : Type of data source. Ex: 'prometheus' . refresh : (default 'load' ) 'never' : Variables queries are cached and values are not updated. This is fine if the values never change, but problematic if they are dynamic and change a lot. 'load' : Queries the data source every time the dashboard loads. This slows down dashboard loading, because the variable query needs to be completed before dashboard can be initialized. 'time' : Queries the data source when the dashboard time range changes. Only use this option if your variable options query contains a time range filter or is dependent on the dashboard time range. regex : (default '' ) Regex filter for which data source instances to choose from in the variable value drop-down list. Leave this field empty to display all instances. @return A data source variable .","title":"template.datasource"},{"location":"api-docs/#templatecustom","text":"Use a custom variable for values that do not change. This might be numbers, strings, or even other variables. @params allValues : (optional) Formatting for multi-value variables current : Selected value hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. includeAll : (default false ) Whether all value option is available or not. label : (default '' ) Display name of the variable dropdown. If you don\u2019t enter a display name, then the dropdown label will be the variable name. multi : (default false ) Whether multiple values can be selected or not from variable value list. name : Variable name query : Comma separated without spacing list of selectable values. refresh : (default 'never' ) 'never' : Variables queries are cached and values are not updated. This is fine if the values never change, but problematic if they are dynamic and change a lot. 'load' : Queries the data source every time the dashboard loads. This slows down dashboard loading, because the variable query needs to be completed before dashboard can be initialized. 'time' : Queries the data source when the dashboard time range changes. Only use this option if your variable options query contains a time range filter or is dependent on the dashboard time range. valuelabels : (default {} ) Display names for values defined in query. For example, if query='new,old' , then you may display them as follows valuelabels={new: 'nouveau', old: 'ancien'} . @return A custom variable.","title":"template.custom"},{"location":"api-docs/#templatetext","text":"Text box variables display a free text input field with an optional default value. This is the most flexible variable, because you can enter any value. Use this type of variable if you have metrics with high cardinality or if you want to update multiple panels in a dashboard at the same time. @params label : (default '' ) Display name of the variable dropdown. If you don\u2019t enter a display name, then the dropdown label will be the variable name. name : Variable name. @return A text box variable.","title":"template.text"},{"location":"api-docs/#templateadhoc","text":"Ad hoc filters allow you to add key/value filters that are automatically added to all metric queries that use the specified data source. Unlike other variables, you do not use ad hoc filters in queries. Instead, you use ad hoc filters to write filters for existing queries. Note: Ad hoc filter variables only work with InfluxDB, Prometheus, and Elasticsearch data sources. @params datasource : Target data source hide : (default '' ) '' : the variable dropdown displays the variable Name or Label value. 'label' : the variable dropdown only displays the selected variable value and a down arrow. Any other value: no variable dropdown is displayed on the dashboard. label : (optional) Display name of the variable dropdown. If you don\u2019t enter a display name, then the dropdown label will be the variable name. name : Variable name. @return An ad hoc filter","title":"template.adhoc"},{"location":"api-docs/#textnew","text":"","title":"text.new"},{"location":"api-docs/#timepickernew","text":"","title":"timepicker.new"},{"location":"community-plugins/","text":"Community Plugins Jsonnet makes it easy to patch an existing library. Although Grafonnet only supports core Grafana features and plugins, it is easy to extend. For example: local grafonnet = (import 'grafonnet-lib/grafana.libsonnet') + (import 'my-plugin-lib/my-plugin.libsonnet'); { ... } Plugin List If you've developed a Grafonnet extension for supporting a community plugin, please submit a pull request to get it added to this list. Status panel (by Vonage) template plugin: link . Statusmap panel (by Flant) template plugin: link . Polystat panel (by Grafana Labs) template plugin: link .","title":"Community Plugins"},{"location":"community-plugins/#community-plugins","text":"Jsonnet makes it easy to patch an existing library. Although Grafonnet only supports core Grafana features and plugins, it is easy to extend. For example: local grafonnet = (import 'grafonnet-lib/grafana.libsonnet') + (import 'my-plugin-lib/my-plugin.libsonnet'); { ... }","title":"Community Plugins"},{"location":"community-plugins/#plugin-list","text":"If you've developed a Grafonnet extension for supporting a community plugin, please submit a pull request to get it added to this list. Status panel (by Vonage) template plugin: link . Statusmap panel (by Flant) template plugin: link . Polystat panel (by Grafana Labs) template plugin: link .","title":"Plugin List"},{"location":"examples/","text":"Examples Simple Grafana 5.x dashboard: Please note that the layout has changed, no row objects and new possible nesting of panel objects. You need to set schemaVersion parameter on dashboard object to at least 16. local grafana = import 'grafonnet/grafana.libsonnet'; local dashboard = grafana.dashboard; local row = grafana.row; local singlestat = grafana.singlestat; local prometheus = grafana.prometheus; local template = grafana.template; dashboard.new( 'JVM', schemaVersion=16, tags=['java'], ) .addTemplate( grafana.template.datasource( 'PROMETHEUS_DS', 'prometheus', 'Prometheus', hide='label', ) ) .addTemplate( template.new( 'env', '$PROMETHEUS_DS', 'label_values(jvm_threads_current, env)', label='Environment', refresh='time', ) ) .addTemplate( template.new( 'job', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\"}, job)', label='Job', refresh='time', ) ) .addTemplate( template.new( 'instance', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\",job=\"$job\"}, instance)', label='Instance', refresh='time', ) ) .addPanel( singlestat.new( 'uptime', format='s', datasource='Prometheus', span=2, valueName='current', ) .addTarget( prometheus.target( 'time() - process_start_time_seconds{env=\"$env\", job=\"$job\", instance=\"$instance\"}', ) ), gridPos={ x: 0, y: 0, w: 24, h: 3, } ) Simple Grafana 4.x dashboard: local grafana = import 'grafonnet/grafana.libsonnet'; local dashboard = grafana.dashboard; local row = grafana.row; local singlestat = grafana.singlestat; local prometheus = grafana.prometheus; local template = grafana.template; dashboard.new( 'JVM', tags=['java'], ) .addTemplate( grafana.template.datasource( 'PROMETHEUS_DS', 'prometheus', 'Prometheus', hide='label', ) ) .addTemplate( template.new( 'env', '$PROMETHEUS_DS', 'label_values(jvm_threads_current, env)', label='Environment', refresh='time', ) ) .addTemplate( template.new( 'job', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\"}, job)', label='Job', refresh='time', ) ) .addTemplate( template.new( 'instance', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\",job=\"$job\"}, instance)', label='Instance', refresh='time', ) ) .addRow( row.new() .addPanel( singlestat.new( 'uptime', format='s', datasource='Prometheus', span=2, valueName='current', ) .addTarget( prometheus.target( 'time() - process_start_time_seconds{env=\"$env\", job=\"$job\", instance=\"$instance\"}', ) ) ) ) Find more examples in the repo examples directory.","title":"Examples"},{"location":"examples/#examples","text":"Simple Grafana 5.x dashboard: Please note that the layout has changed, no row objects and new possible nesting of panel objects. You need to set schemaVersion parameter on dashboard object to at least 16. local grafana = import 'grafonnet/grafana.libsonnet'; local dashboard = grafana.dashboard; local row = grafana.row; local singlestat = grafana.singlestat; local prometheus = grafana.prometheus; local template = grafana.template; dashboard.new( 'JVM', schemaVersion=16, tags=['java'], ) .addTemplate( grafana.template.datasource( 'PROMETHEUS_DS', 'prometheus', 'Prometheus', hide='label', ) ) .addTemplate( template.new( 'env', '$PROMETHEUS_DS', 'label_values(jvm_threads_current, env)', label='Environment', refresh='time', ) ) .addTemplate( template.new( 'job', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\"}, job)', label='Job', refresh='time', ) ) .addTemplate( template.new( 'instance', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\",job=\"$job\"}, instance)', label='Instance', refresh='time', ) ) .addPanel( singlestat.new( 'uptime', format='s', datasource='Prometheus', span=2, valueName='current', ) .addTarget( prometheus.target( 'time() - process_start_time_seconds{env=\"$env\", job=\"$job\", instance=\"$instance\"}', ) ), gridPos={ x: 0, y: 0, w: 24, h: 3, } ) Simple Grafana 4.x dashboard: local grafana = import 'grafonnet/grafana.libsonnet'; local dashboard = grafana.dashboard; local row = grafana.row; local singlestat = grafana.singlestat; local prometheus = grafana.prometheus; local template = grafana.template; dashboard.new( 'JVM', tags=['java'], ) .addTemplate( grafana.template.datasource( 'PROMETHEUS_DS', 'prometheus', 'Prometheus', hide='label', ) ) .addTemplate( template.new( 'env', '$PROMETHEUS_DS', 'label_values(jvm_threads_current, env)', label='Environment', refresh='time', ) ) .addTemplate( template.new( 'job', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\"}, job)', label='Job', refresh='time', ) ) .addTemplate( template.new( 'instance', '$PROMETHEUS_DS', 'label_values(jvm_threads_current{env=\"$env\",job=\"$job\"}, instance)', label='Instance', refresh='time', ) ) .addRow( row.new() .addPanel( singlestat.new( 'uptime', format='s', datasource='Prometheus', span=2, valueName='current', ) .addTarget( prometheus.target( 'time() - process_start_time_seconds{env=\"$env\", job=\"$job\", instance=\"$instance\"}', ) ) ) ) Find more examples in the repo examples directory.","title":"Examples"},{"location":"getting-started/","text":"Getting Started Prerequisites You must first install Jsonnet. See the instructions on its GitHub page: https://github.com/google/jsonnet#packages There is also an implementation in Go if you'd prefer: https://github.com/google/go-jsonnet#installation-instructions Install Grafonnet Simplest way to install Grafonnet is to clone the repository: git clone https://github.com/grafana/grafonnet-lib.git A slightly more advanced approach is to use jsonnet-bundler . jb init jb install https://github.com/grafana/grafonnet-lib/grafonnet See the Usage page for next steps.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#prerequisites","text":"You must first install Jsonnet. See the instructions on its GitHub page: https://github.com/google/jsonnet#packages There is also an implementation in Go if you'd prefer: https://github.com/google/go-jsonnet#installation-instructions","title":"Prerequisites"},{"location":"getting-started/#install-grafonnet","text":"Simplest way to install Grafonnet is to clone the repository: git clone https://github.com/grafana/grafonnet-lib.git A slightly more advanced approach is to use jsonnet-bundler . jb init jb install https://github.com/grafana/grafonnet-lib/grafonnet See the Usage page for next steps.","title":"Install Grafonnet"},{"location":"style-guide/","text":"Style Guide Code Style Grafonnet carries no specific code style opinions. Only to use and enforce those of Jsonnet tooling . Particularly jsonnetfmt . Running make test-update will run the repository's unit tests while updating files with jsonnetfmt . This is a good way to ensure your contributions are formatted correctly. Component Composition Grafonnet is, however, opinionated about component composition. This is to ensure consistency among components and hopefully keep the codebase simple. Interfaces All panels should implement the same one function interface, panel.new . All datasource targets should implement the same one function interface, datasource.target . Most components are either panels or datasource targets so these two interfaces cover the bases for the most part. An exception is template which implements a function for each template type. Mutator Functions and Chaining Being that components are to implement a single function, they are expected to have mutator functions to build upon them. Each function should return the component itself so mutator functions can be chained. A common example is panel.addTarget for appending a datasource target. graphPanel.new( 'My Graph' ).addTarget( prometheus.target('up'), )","title":"Style Guide"},{"location":"style-guide/#style-guide","text":"","title":"Style Guide"},{"location":"style-guide/#code-style","text":"Grafonnet carries no specific code style opinions. Only to use and enforce those of Jsonnet tooling . Particularly jsonnetfmt . Running make test-update will run the repository's unit tests while updating files with jsonnetfmt . This is a good way to ensure your contributions are formatted correctly.","title":"Code Style"},{"location":"style-guide/#component-composition","text":"Grafonnet is, however, opinionated about component composition. This is to ensure consistency among components and hopefully keep the codebase simple.","title":"Component Composition"},{"location":"style-guide/#interfaces","text":"All panels should implement the same one function interface, panel.new . All datasource targets should implement the same one function interface, datasource.target . Most components are either panels or datasource targets so these two interfaces cover the bases for the most part. An exception is template which implements a function for each template type.","title":"Interfaces"},{"location":"style-guide/#mutator-functions-and-chaining","text":"Being that components are to implement a single function, they are expected to have mutator functions to build upon them. Each function should return the component itself so mutator functions can be chained. A common example is panel.addTarget for appending a datasource target. graphPanel.new( 'My Graph' ).addTarget( prometheus.target('up'), )","title":"Mutator Functions and Chaining"},{"location":"usage/","text":"Usage The Simplest Approach Your current directory would look something like this: \u25b8 tree -L 1 . . \u251c\u2500\u2500 dashboard.jsonnet \u2514\u2500\u2500 grafonnet-lib 1 directory, 1 file You've cloned Grafonnet and you've create a file called, dashboard.jsonnet . That file might look something like this: local grafana = import 'grafonnet/grafana.libsonnet'; grafana.dashboard.new('Empty Dashboard') From here, you can run the following command to generate your dashboard: jsonnet -J grafonnet-lib dashboard.jsonnet show output { \"__inputs\": [ ], \"__requires\": [ ], \"annotations\": { \"list\": [ ] }, \"editable\": false, \"gnetId\": null, \"graphTooltip\": 0, \"hideControls\": false, \"id\": null, \"links\": [ ], \"refresh\": \"\", \"rows\": [ ], \"schemaVersion\": 14, \"style\": \"dark\", \"tags\": [ ], \"templating\": { \"list\": [ ] }, \"time\": { \"from\": \"now-6h\", \"to\": \"now\" }, \"timepicker\": { \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"browser\", \"title\": \"Empty Dashboard\", \"version\": 0 } Next you need to actually create the dashboard on Grafana. One option is to paste the dashboard JSON on the Grafana UI. A less tedious approach would be to use Grafana's dashboard API . For example, you could create and execute this script in our example directory: #!/usr/bin/env bash JSONNET_PATH=grafonnet-lib \\ jsonnet dashboard.jsonnet > dashboard.json payload=\"{\\\"dashboard\\\": $(jq . dashboard.json), \\\"overwrite\\\": true}\" curl -X POST $BASIC_AUTH \\ -H 'Content-Type: application/json' \\ -d \"${payload}\" \\ \"http://admin:admin@localhost:3000/api/dashboards/db\" The above URL assumes you're running a Grafana instance locally. You can do that by running a Grafana container on your local Docker engine: docker run --rm -d -p 3000:3000 grafana/grafana Grizzly Another way you could manage your Grafonnet code is by using Grizzly . Grizzly is a command line tool for managing Grafana dashboards as code written in Jsonnet. In this section, we'll assume you've used jsonnet-bundler to install Grafonnet. In which case your current directory would look like this: \u25b8 tree -L 2 . . \u251c\u2500\u2500 dashboards.jsonnet \u251c\u2500\u2500 jsonnetfile.json \u251c\u2500\u2500 jsonnetfile.lock.json \u2514\u2500\u2500 vendor \u251c\u2500\u2500 github.com \u2514\u2500\u2500 grafonnet -> github.com/grafana/grafonnet-lib/grafonnet 3 directories, 3 files dashboards.jsonnet (now plural) will look slightly different than before: local grafana = import 'grafonnet/grafana.libsonnet'; { grafanaDashboards:: { empty_dashboard: grafana.dashboard.new('Empty Dashboard'), }, } First you need to set the GRAFANA_URL environment variable: export GRAFANA_URL=http://admin:admin@localhost:3000 Next create the dashboard with on your Grafana instance with: grr apply dashboards.jsonnet Check Grizzly's GitHub page for other commands and documentation.","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#the-simplest-approach","text":"Your current directory would look something like this: \u25b8 tree -L 1 . . \u251c\u2500\u2500 dashboard.jsonnet \u2514\u2500\u2500 grafonnet-lib 1 directory, 1 file You've cloned Grafonnet and you've create a file called, dashboard.jsonnet . That file might look something like this: local grafana = import 'grafonnet/grafana.libsonnet'; grafana.dashboard.new('Empty Dashboard') From here, you can run the following command to generate your dashboard: jsonnet -J grafonnet-lib dashboard.jsonnet show output { \"__inputs\": [ ], \"__requires\": [ ], \"annotations\": { \"list\": [ ] }, \"editable\": false, \"gnetId\": null, \"graphTooltip\": 0, \"hideControls\": false, \"id\": null, \"links\": [ ], \"refresh\": \"\", \"rows\": [ ], \"schemaVersion\": 14, \"style\": \"dark\", \"tags\": [ ], \"templating\": { \"list\": [ ] }, \"time\": { \"from\": \"now-6h\", \"to\": \"now\" }, \"timepicker\": { \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"browser\", \"title\": \"Empty Dashboard\", \"version\": 0 } Next you need to actually create the dashboard on Grafana. One option is to paste the dashboard JSON on the Grafana UI. A less tedious approach would be to use Grafana's dashboard API . For example, you could create and execute this script in our example directory: #!/usr/bin/env bash JSONNET_PATH=grafonnet-lib \\ jsonnet dashboard.jsonnet > dashboard.json payload=\"{\\\"dashboard\\\": $(jq . dashboard.json), \\\"overwrite\\\": true}\" curl -X POST $BASIC_AUTH \\ -H 'Content-Type: application/json' \\ -d \"${payload}\" \\ \"http://admin:admin@localhost:3000/api/dashboards/db\" The above URL assumes you're running a Grafana instance locally. You can do that by running a Grafana container on your local Docker engine: docker run --rm -d -p 3000:3000 grafana/grafana","title":"The Simplest Approach"},{"location":"usage/#grizzly","text":"Another way you could manage your Grafonnet code is by using Grizzly . Grizzly is a command line tool for managing Grafana dashboards as code written in Jsonnet. In this section, we'll assume you've used jsonnet-bundler to install Grafonnet. In which case your current directory would look like this: \u25b8 tree -L 2 . . \u251c\u2500\u2500 dashboards.jsonnet \u251c\u2500\u2500 jsonnetfile.json \u251c\u2500\u2500 jsonnetfile.lock.json \u2514\u2500\u2500 vendor \u251c\u2500\u2500 github.com \u2514\u2500\u2500 grafonnet -> github.com/grafana/grafonnet-lib/grafonnet 3 directories, 3 files dashboards.jsonnet (now plural) will look slightly different than before: local grafana = import 'grafonnet/grafana.libsonnet'; { grafanaDashboards:: { empty_dashboard: grafana.dashboard.new('Empty Dashboard'), }, } First you need to set the GRAFANA_URL environment variable: export GRAFANA_URL=http://admin:admin@localhost:3000 Next create the dashboard with on your Grafana instance with: grr apply dashboards.jsonnet Check Grizzly's GitHub page for other commands and documentation.","title":"Grizzly"}]}